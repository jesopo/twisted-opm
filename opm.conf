# Pools used to limit the number of scans running in parallel. Each
# scan defined later takes a token from the pool when it starts and
# hands it back when it stops. If the pool runs out of tokens further
# scans start getting queued. Normally pool numbers correspond roughly
# to file descriptor usage.
#
# You can use any number of pools. The "dns" pool is special: it is used
# internally by dns lookups done by the scanner. In normal usage these
# lookups are rare. You can use the "dns" pool with normal scanners too.
#
# Running scans against common ports with a short timeout against a
# different pool than longer-running less common ones is supposed to
# help when the scanner is overloaded.
pools:
  dns: 64
  high-prio: 300
  low-prio: 300

# Target various checks connect to. This needs to be publically reachable,
# and should be something you control (!) but not the checker itself (!).
target_ip: 213.92.8.7
target_port: 31204
target_url: http://cake.freenode.net/proxycheck.txt
# Text sent by the target. If found anywhere in the reply the check matches.
target_strings: ['Proxy Check', 'sdIv:;aL{l*h?[?Q4-xiYf9QSi3U&7edDCVZ3z<t']
# Maximum number of bytes to accept before closing the connection.
# This is to prevent getting flooded by a proxy that just sends garbage.
# Note that if you have enough bandwidth keeping this low is not critical,
# since the timeout will kill those checks eventually anyway.
max_bytes: 16384
# optional address to connect from
#bind_address: '192.168.1.33'

irc:
  # IRC presence, used to take connect snotes and commands and set klines.
  mznet:
    # These should all be obvious. Many are optional.
    # Note unknown keys are silently ignored.
    host: 192.168.1.1
    port: 6667
    ssl: false
    nick: topm
    # username: topm (defaults to nick)
    pass: meh
    # Sent after connect, before opering.
    onconnectmsgs: [['nickserv', 'identify topm password']]
    opername: god
    operpass: kittens
    # Used to oper up with CHALLENGE. When using operkey, operpass becomes the
    # keyfile's password
    #operkey: ~/.irc.pub
    # Enable if we are flood-exempt once opered. Defaults to off.
    #flood_exempt: True
    # Sent once opered. Use to receive the right snotes.
    opermode: +s +c
    # Sets the bot away on connect if present.
    away: You do not want to talk to me.
    # Currently only a single channel (per presence) is supported.
    channel: '#services'
    # Regexp used to match connect snotes.
    # Named groups should include the nick and username, and ip and/or host.
    # Having both matched is best, to avoid (slow) dns lookups.
    # Hopefully this works on charybdis/seven:
    connregex: '^\*\*\* Notice -- Client connecting: (?P<nick>[^ ]+) \((?P<user>[^@]+)@(?P<host>[^)]+)\) \[(?P<ip>[^]]+)\]'
    # length of time (seconds) to cache an IP scan result
    scan-cache-time: 120
    # maximum size of IP scan cache
    scan-cache-size: 1000000
    # Commands to send if an open proxy is found.
scansets:
  # Named groups of scans to run. Each group of scans shares a timeout
  # (the timeout is applied to each scan individually, not to the entire
  # group, so if the scanner is busy the time to run all scans can be
  # longer than this timeout).
  # Scans look like [pool, check, [, args]].
  # What the extra args do depends on the scanner.
  default:
    timeout: 60
      - 'KLINE 1440 *@{IP} :You running an open proxy'
      - 'NOTICE {CHAN} :BAD {MASK} ({REASON} - scan)'
    protocols:
      - [high-prio, http, 80]
      - [high-prio, http, 8080]
      - [high-prio, http, 3128]
      - [high-prio, http, 6588]
      - [high-prio, http-get, 80]
      - [high-prio, http-post, 80]
      - [high-prio, http-get, 8080]
      - [high-prio, http-post, 8080]
      - [high-prio, http, 8000]
      - [high-prio, http-get, 8000]
      - [high-prio, http-post, 8000]
      - [high-prio, socks4, 1080]
      - [high-prio, socks5, 1080]
      - [high-prio, http-get, 3128]
      - [high-prio, http-post, 3128]
  dronebl:
    timeout: 10
    actions:
      - 'KLINE 1440 *@{IP} :You have a host listed in DroneBL https://dronebl.org/lookup?ip={IP}'
      - 'NOTICE {CHAN} :BAD {MASK} ({REASON} - dronebl)'
    protocols:
      - [dns, dnsbl, dnsbl.dronebl.org, {
         1: Testing,
         2: Sample data,
         3: IRC spam drone,
         5: Bottler,
         6: Unknown worm or spambot,
         7: DDoS Drone,
         8: Open SOCKS proxy,
         9: Open HTTP Proxy,
         10: Proxychain,
         13: Automated dictionary attacks,
         14: Open WINGATE proxy,
         15: Compromised router/gateway,
         16: Autorooting worms,
         17: botnet,
         255: Uncategorized threat class,
         }, "1.1.1.1"]
  certs:
    timeout: 10
    actions:
      - 'KLINE 1440 *@{IP} :You are connecting from an abusable host'
      - 'NOTICE {CHAN} :BAD {MASK} ({REASON} - cert)'
    protocols:
      - [high-prio, cert, 443, {
          'scn:myvpn\.tld':     'Test VPN',
          's[ca]n:.*\.vpn.tld': 'Test VPN 2'
        }]
  http-headers:
    timeout: 10
    actions:
      - 'KLINE 1440 *@{IP} :You are connecting from an abusable host'
      - 'NOTICE {CHAN} :BAD {MASK} ({REASON} - header)'
    protocols:
      - [high-prio, tcp-banner, 80, {
        "Test VPN": [
          "HTTP/1.1 200 OK",
          "Server: nginx/1.14.2"
        ]
      }, "GET / HTTP/1.1\r\nHost: a\r\n\r\n"]

  http-body:
    timeout: 10
    actions:
      - 'KLINE 1440 *@{IP} :You are connecting from an abusable host'
      - 'NOTICE {CHAN} :BAD {MASK} ({REASON} - body)'
    protocols:
      - [high-prio, http-body, 80, {
          "7dd71afcfb14e105e80b0c0d7fce370a28a41f0a": "Lolnerd VPN"
        }]

masks:
  "*!*@*": [default, dronebl, rdns]
